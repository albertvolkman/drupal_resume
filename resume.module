<?php

/**
 * Implements hook_permission()
 */
function resume_permission() {
  return array(
    'view resume' => array(
      'title' => t('View resume'),
      'description' => t("View users' resumes"),
    ),
    'view own resume' => array(
      'title' => t('View own resume'),
      'description' => t("View users' resumes"),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function resume_menu() {
  $items['user/resume'] = array(
    'title' => 'Resume',
    'page callback' => '_resume_your_display',
    'access arguments' => array('view own resume'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/resume'] = array(
    'title' => 'Resume',
    'page callback' => '_resume_display',
    'page arguments' => array(1),
    'access arguments' => array('view resume'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function resume_block_info() {
  $blocks['resume'] = array(
    'info' => t('Resume'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function resume_block_view($delta) {
  $uid = (int) arg(1);

  $block = array();

  switch ($delta) {
    case 'resume':
      $block['subject'] = t('Resume');
      $block['content'] = l('Resume', 'user/' . $uid . '/resume');
      break;
  }

  return $block;
}

/**
 * Implements hook_theme()
 */
function resume_theme($existing, $type, $theme, $path) {
  return array(
    'resume' => array(
      'template' => 'resume',
      'variables' => array('user' => NULL),
    ),
  );
}

function _resume_display($uid) {
  $user = user_load($uid);
  drupal_set_title('Resume');
  return theme('resume', array('user' => $user));
}

function _resume_your_display() {
  global $user;
  $user = user_load($user->uid);
  drupal_set_title('Resume');
  return theme('resume', array('user' => $user));
}

/**
 * Implements hook_template_preprocess_hook()
 */
function template_preprocess_resume(&$vars) {
//print_r($vars);
  $user = $vars['user'];
  $vars['firstname'] = $user->field_firstname['und'][0]['safe_value'];
  $vars['lastname'] = $user->field_lastname['und'][0]['safe_value'];
  $vars['current_area'] = ucfirst($user->field_current_area['und'][0]['value']) . ', FL';
  $vars['zipcode'] = $user->field_zipcode['und'][0]['value'];
  $vars['objective'] = !empty($user->field_objective) ? $user->field_objective['und'][0]['safe_value'] : '';
  $vars['positions'] = _format_terms($user->field_positions);
  $vars['startwork'] = !empty($user->field_startwork) ? date('m/d/Y', strtotime($user->field_startwork['und'][0]['value'])) : '';
  $vars['contactemail'] = !empty($user->field_contactemail) ? $user->field_contactemail['und'][0]['email'] : '';
  $vars['available'] = field_view_field('user', $user, 'field_available', 'default');
  $vars['education'] = field_view_field('user', $user, 'field_education', 'default');
  $vars['achievements'] = !empty($user->field_achievements) ? format_results($user->field_achievements['und']) : '';
  $vars['skills'] = !empty($user->field_skills) ? format_results($user->field_skills['und'][0]) : '';
  $vars['armedforces'] = field_view_field('user', $user, 'field_armedforces', 'default');
  $vars['experience'] = '';
  $experience_field = field_view_field('user', $user, 'field_experience', 'list');
  if (!empty($experience_field)) {
    foreach($experience_field[0]['#data']['rows'] as $data) {
      $started_on = empty($data['started_on']) ? 0 : strtotime($data['started_on']);
      $ended_on = empty($data['ended_on']) ? 'Current' : strtotime($data['ended_on']);
      if (!empty($data['started_on']) && !empty($data['ended_on'])) {
        $data['started_on'] = date('n/j/y', $started_on);
        $data['ended_on'] = date('n/j/y', $ended_on);
        $data['duration'] = dateDiff($started_on, $ended_on, 1);
      } else if (!empty($data['started_on'])) {
        $data['started_on'] = date('n/j/y', $started_on);
        $data['ended_on'] = 'Current';
        $data['duration'] = dateDiff($started_on, time(), 1);
      } else {
        $data['started_on'] = $data['ended_on'] = $data['duration'] = 0;
      }
      $vars['experience'][] = $data;
    }
  } else {
    $vars['experience'] = array();
  }
  $vars['reference'] = '';
  foreach($user->field_reference['und'] as $data) {
    $vars['reference'][] = $data;
  }
}

function _format_terms($field) {
  $output = array();
  // Get terms and theme
  $tids = array();
  if (!empty($field)) {
    foreach ($field['und'] as $tid) {
      $tids[] = $tid['tid'];
    }
  }

  foreach (taxonomy_term_load_multiple($tids) as $term) {
    $output[] = $term->name;
  }

  return theme('item_list', array('items' => $output));
}

function format_results($data) {
  $output = array();
  foreach ($data as $key => $value) {
    if (is_array($value)) {
      if (isset($value['safe_value'])) {
        $output[] = $value['safe_value'];
      } else if (isset($value['value'])) {
        $output[] = $value['value'];
      }
    } else {
      $output[] = $value['safe_value'];
    }
  }

  return theme('item_list', array('items' => $output));
}

function dateDiff($time1, $time2, $precision = 6) {
  // If not numeric then convert texts to unix timestamps
  if (!is_int($time1)) {
    $time1 = strtotime($time1);
  }
  if (!is_int($time2)) {
    $time2 = strtotime($time2);
  }

  // If time1 is bigger than time2
  // Then swap time1 and time2
  if ($time1 > $time2) {
    $ttime = $time1;
    $time1 = $time2;
    $time2 = $ttime;
  }

  // Set up intervals and diffs arrays
  $intervals = array('year','month','day','hour','minute','second');
  $diffs = array();

  // Loop thru all intervals
  foreach ($intervals as $interval) {
    // Set default diff to 0
    $diffs[$interval] = 0;
    // Create temp time from time1 and interval
    $ttime = strtotime("+1 " . $interval, $time1);
    // Loop until temp time is smaller than time2
    while ($time2 >= $ttime) {
      $time1 = $ttime;
      $diffs[$interval]++;
      // Create new temp time from time1 and interval
      $ttime = strtotime("+1 " . $interval, $time1);
    }
  }

  $count = 0;
  $times = array();
  // Loop thru all diffs
  foreach ($diffs as $interval => $value) {
    // Break if we have needed precission
    if ($count >= $precision) {
      break;
    }
    // Add value and interval
    // if value is bigger than 0
    if ($value > 0) {
      // Add s if value is not 1
      if ($value != 1) {
        $interval .= "s";
      }
      // Add value and interval to times array
      $times[] = $value . " " . $interval;
      $count++;
    }
  }

  // Return string with times
  return implode(", ", $times);
}
